#!/bin/bash

set +ex

base=$( cd $(dirname $0)/../.. && pwd )
if [ ! -d $base/tmp ]; then
  mkdir -p $base/tmp
fi

cleanup() {
  #(cd $base && vagrant destroy -f)

  if [ ! -z "$OLD_BOSH_LITE_PRIVATE_KEY" ]; then
    export BOSH_LITE_PRIVATE_KEY=$OLD_BOSH_LITE_PRIVATE_KEY
  fi

  if [ -f "$tmpfile" ]; then
    rm -rf $tmpfile
  fi
}

trap cleanup EXIT

# Vagrant needs ubuntu to own the private key if aws provider
if [ ! -z "$BOSH_LITE_PRIVATE_KEY" ]; then
  tmpfile=`mktemp -t bosh-agent-tests-XXXXXXXX`
  cat $BOSH_LITE_PRIVATE_KEY > $tmpfile
  export OLD_BOSH_LITE_PRIVATE_KEY=$BOSH_LITE_PRIVATE_KEY
  export BOSH_LITE_PRIVATE_KEY=$tmpfile
fi

cd $base
echo -e "\n Running agent integration tests..."
vagrant up $@

vagrant ssh-config > $base/tmp/vagrant-config

srcdir="/home/vagrant/go/src/github.com/cloudfoundry/bosh-agent"
script="$srcdir/integration/assets/configure-environment.sh"
ssh -F $base/tmp/vagrant-config default "chmod +x $script && sh -c $script"

# sleep for a few seconds
sleep 3

# check that agent id has been set as expected
result=`vagrant ssh -c "grep -c the_agent_id /var/vcap/bosh/settings.json" | head -c 1`
if [ "$result" != "1" ]; then
  echo "failure: agent_id not set as expected"
  exit 1
fi

vagrant ssh -c "sudo mount"

# check that agent unmounted disk
result=`vagrant ssh -c "sudo mount | grep -c /dev/loop2" | head -c 1`
if [ "$result" == "0" ]; then
  echo "success :)"
  exit 0
else
  echo "failure: config drive still mounted"
  exit 1
fi
